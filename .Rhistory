map
dim(buffers_agebs)
class(buffers_agebs)
names(buffers_agebs)
buffers_agebs$FID[1]
buffers_agebs <- buffers_agebs %>% rename(buffer = geometry)
names(buffers_agebs)
agebs_nl <- agebs_nl %>% cbind(buffers_agebs)
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[1])
agebs_nl$geometry[1]
agebs_nl$geometry[1][1]
agebs_nl$geometry[1]['MULTIPOLYGON']
agebs_nl$geometry[1]['MULTIPOLYGON'][1]
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[1]) %>% addPolygons(data = agebs_nl$geometry)
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[1]) %>% addPolygons(data = agebs_nl$geometry[1])
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[1]) %>% addCircleMarkers(data = agebs_nl$centroid[1])
leaflet() %>% addTiles() %>% addPolygons(data = agebs_marginados$buffer[1]) %>% addCircleMarkers(data = agebs_marginados$centroid[1])
leaflet() %>% addTiles() %>% addPolygons(data = agebs_marginados$buffer[1]) %>% addPolygons(data = agebs_marginados$centroid[1])
leaflet() %>% addTiles() %>% addPolygons(data = agebs_marginados$buffer[2]) %>% addPolygons(data = agebs_marginados$centroid[2])
names(agebs_marginados)
names(agebs_nl)
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[1]) %>% addPolygons(data = agebs_nl$geometry[1]) %>% addCircleMarkers(data = agebs_nl$centroid[1])
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[2]) %>% addPolygons(data = agebs_nl$geometry[2]) %>% addCircleMarkers(data = agebs_nl$centroid[2])
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[2]) %>% addPolygons(data = agebs_nl$geometry[2]) %>% addCircleMarkers(data = agebs_nl$centroid[2]) %>% addPolygons(data = st_buffer(agebs_nl$centroid[2]))
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[2]) %>% addPolygons(data = agebs_nl$geometry[2]) %>% addCircleMarkers(data = agebs_nl$centroid[2]) %>% addPolygons(data = st_buffer(agebs_nl$centroid[2],1000))
for (i in 1:5) {
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[i]) %>% addPolygons(data = agebs_nl$geometry[i]) %>% addCircleMarkers(data = agebs_nl$centroid[i]) %>% addPolygons(data = st_buffer(agebs_nl$centroid[i],1000))
}
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[1]) %>% addPolygons(data = agebs_nl$geometry[1]) %>% addCircleMarkers(data = agebs_nl$centroid[1]) %>% addPolygons(data = st_buffer(agebs_nl$centroid[1],1000))
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[1]) %>% addPolygons(data = agebs_nl$geometry[3]) %>% addCircleMarkers(data = agebs_nl$centroid[3]) %>% addPolygons(data = st_buffer(agebs_nl$centroid[3],1000))
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[3]) %>% addPolygons(data = agebs_nl$geometry[3]) %>% addCircleMarkers(data = agebs_nl$centroid[3]) %>% addPolygons(data = st_buffer(agebs_nl$centroid[3],1000))
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[4]) %>% addPolygons(data = agebs_nl$geometry[4]) %>% addCircleMarkers(data = agebs_nl$centroid[4]) %>% addPolygons(data = st_buffer(agebs_nl$centroid[4],1000))
leaflet() %>% addTiles() %>% addPolygons(data = agebs_nl$buffer[5]) %>% addPolygons(data = agebs_nl$geometry[5]) %>% addCircleMarkers(data = agebs_nl$centroid[5]) %>% addPolygons(data = st_buffer(agebs_nl$centroid[5],1000))
table(marginados_unidades_count$proporcion_saludable)
# GENERACIÓN DE DATOS DE LOS AGEBS EN NUEVO LEON
# (LOS DATOS FUERON DESCARGADOS USANDO EL SCRIPT descarga_datos_geo.R)
agebs_nl <- data.frame()
for (code in nl_codes) {
mun_str <- sprintf("%03d",code)
filepath <- paste0(ageb_output_dir,"/ageb19",mun_str,".geojson")
mun_agebs <- read_sf(filepath)
agebs_nl <- rbind(agebs_nl,mun_agebs)
print(paste("Municipio",mun_str,"agregado."))
}
# CRUZAR DATOS DE AGEBS CON DATOS DE INDICE DE MARGINACIÓN URBANA
agebs_nl$CVE_AGEB <- paste0(agebs_nl$cve_agee,agebs_nl$cve_agem,agebs_nl$cve_loc,agebs_nl$cve_ageb)
agebs_nl <- left_join(agebs_nl,IMU_2020,by="CVE_AGEB")
agebs_nl$GM_2020 <- factor(agebs_nl$GM_2020, levels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"), ordered = TRUE)
# ENCONTRAR CENTROIDE DE AGEBS
agebs_nl$centroid <- st_centroid(agebs_nl$geometry)
#####DENUE
datos_denue <- read_sf("Datos/raw/INEGI_DENUE_12052023/INEGI_DENUE_12052023.shp") %>%
select(id,clee,nom_estab,raz_social,
codigo_act,nombre_act,per_ocu,
cve_ent,cve_mun,ageb,manzana,
latitud,longitud,geometry)
Encoding(datos_denue$nom_estab) <- "latin1"
Encoding(datos_denue$nombre_act) <- "latin1"
datos_denue$alimento_convencional <- 1
# OXXOS Y SEVEN ELEVENS
datos_denue$alimento_convencional[datos_denue$raz_social %in% c("CADENA COMERCIAL OXXO SA DE CV",
"CADENA COMERCIAL OXXO",
"CADENA COMERCIAL OXXO SUCURSAL HACIENDADEL ANGEL SA DE CV",
"7-ELEVEN MEXICO SA DE CV",
"7 ELEVEN MEXICO SA DE CV",
"SEVEN ELEVEN DE MEXICO")] <- 0
# DULCERÍAS
datos_denue$alimento_convencional[datos_denue$codigo_act=="461160"] <- 0
# PALETERÍAS
datos_denue$alimento_convencional[datos_denue$codigo_act=="461170"] <- 0
# OTROS ALIMENTOS
datos_denue$alimento_convencional[datos_denue$codigo_act=="461190"] <- 0
# MISCELANEAS, TIENDAS DE ABARROTES
datos_denue$alimento_convencional[datos_denue$codigo_act=="461110"] <- 0
datos_denue <- st_transform(datos_denue, crs = 4326)
leaflet() %>% addTiles() %>% addPolygons(data = buffers_agebs[1]) %>% addPolygons(data = agebs_nl$centroid[1])
leaflet() %>% addTiles() %>% addPolygons(data = buffers_agebs[1]) %>% addCircleMarkers(data = agebs_nl$centroid[1])
leaflet() %>% addTiles() %>% addPolygons(data = buffers_agebs$buffer[1]) %>% addCircleMarkers(data = agebs_nl$centroid[1])
leaflet() %>% addTiles() %>% addPolygons(data = buffers_agebs$buffer[2]) %>% addCircleMarkers(data = agebs_nl$centroid[2])
names(agebs_nl)
agebs_nl$buffer <- st_buffer(agebs_nl$centroid, dist = 1000)
buffers_agebs <- agebs_nl %>%
as.data.frame() %>%
select(CVE_AGEB,buffer) %>%
st_as_sf()
agebs_denue <- st_join(buffers_agebs,datos_denue,join = st_intersects) %>%
as.data.frame() %>%
select(CVE_AGEB,id,alimento_convencional)
write.csv(agebs_denue, "Datos/processed/agebs_denue.csv")
agebs_denue_count <- agebs_denue  %>%
group_by(CVE_AGEB) %>%
summarise(unidades_totales = n(),
unidades_saludables = sum(alimento_convencional)) %>%
mutate(proporcion_saludable = round(unidades_saludables / unidades_totales, 2))
agebs_nl <- agebs_nl %>%
merge(agebs_denue_count, by = 'CVE_AGEB')
dir.create("Datos/processed/agebs_nl_indice")
write_sf(agebs_marginados, "Datos/processed/agebs_nl_indice/agebs_nl_indice.shp")
write_sf(agebs_nl, "Datos/processed/agebs_nl_indice/agebs_nl_indice.shp")
barplot(table(agebs_denue_count$unidades_totales),
las =2,
main = "Cantidad de AGEBS según su \naccesibilidad a alimentos",
xlab = "Cantidad de unidades económicas minoristas de alimento alrededor del AGEB",
ylab = "Frecuencia")
barplot(table(agebs_denue_count$proporcion_saludable),
las =2,
main = "Cantidad de AGEBS según su \naccesibilidad a alimentos saludables",
xlab = "Proporción de unidades económicas saludables alrededor del AGEB",
ylab = "Frecuencia")
pal <- colorNumeric("YlOrRd", agebs_nl$unidades_totales,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(unidades_totales),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<br><strong>GMU:</strong>",agebs_nl$unidades_totales))
map
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(unidades_totales),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales))
map
pal <- colorNumeric("YlOrRd", agebs_nl$proporcion_saludable,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(proporcion_saludable),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<br><strong>GMU:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables <br>cercanas:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Accesibilidad <br>alimento saludable:</strong>",agebs_nl$proporcion_saludable))
map
pal <- colorNumeric("YlOrRd", agebs_nl$proporcion_saludable,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(proporcion_saludable),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>GMU:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables <br>cercanas:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Accesibilidad <br>alimento saludable:</strong>",agebs_nl$proporcion_saludable))
map
agebs_marginados <- agebs_nl %>% filter(GM_2020 %in% c("Medio", "Alto", "Muy alto"))
dir.create("Datos/processed/agebs_marginados_indice")
write_sf(agebs_marginados, "Datos/processed/agebs_marginados_indice/agebs_marginados_indice.shp")
pal <- colorNumeric("YlOrRd", agebs_nl$proporcion_saludable,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(proporcion_saludable),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>GMU:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables <br>cercanas:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Accesibilidad <br>alimento saludable:</strong>",agebs_nl$proporcion_saludable))
map
saveWidget(map, file = "Datos/processed/accesibilidad_alimentaria.html")
table(agebs_nl$GM_2020)
dir.exists("Datos")
dir.exists("raw")
dir.exists("Datos/raw")
agebs_nl$IM_2020[1:10]
agebs_nl$IMN_2020[1:10]
lm(proporcion_saludable ~ IM_2020, data = agebs_nl)
summary(lm(proporcion_saludable ~ IM_2020, data = agebs_nl))
plot(agebs_nl$IM_2020,agebs_nl$proporcion_saludable)
abline(lm(proporcion_saludable ~ IM_2020, data = agebs_nl))
plot(agebs_nl$IM_2020,agebs_nl$unidades_totales)
abline(lm(unidades_totales ~ IM_2020, data = agebs_nl))
plot(agebs_nl$IM_2020,agebs_nl$unidades_saludables)
abline(lm(unidades_saludables ~ IM_2020, data = agebs_nl))
names(agebs_nl)
plot(agebs_nl$IM_2020,agebs_nl$tvivhab)
abline(lm(tvivhab ~ IM_2020, data = agebs_nl))
plot(agebs_nl$proporcion_saludable,agebs_nl$tvivhab)
abline(lm(tvivhab ~ proporcion_saludable, data = agebs_nl))
plot(agebs_nl$tvivhab,agebs_nl$proporcion_saludable)
abline(lm(proporcion_saludable ~ tvivhab, data = agebs_nl))
table(datos_denue$nombre_act)
dim(datos_denue)
min(agebs_nl$IM_2020)
max(agebs_nl$IM_2020)
agebs_nl$IM_2020[1:10]
class(agebs_nl$IM_2020)
summary(agebs_nl$IM_2020)
agebs_nl$GM_2020[1:10]
table(agebs_nl$GM_2020)
agebs_nl <- agebs_nl %>%
mutate(indice_acceso = case_when(
GM_2020 == "Muy bajo" ~ 0.2,
GM_2020 == "Bajo" ~ 0.4,
GM_2020 == "Medio" ~ 0.6,
GM_2020 == "Alto" ~ 0.8,
GM_2020 == "Muy alto" ~ 1
)) %>%
mutate(indice_acceso = indice_acceso + proporcion_saludable)
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>GMU:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables <br>cercanas:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Accesibilidad <br>alimento saludable:</strong>",agebs_nl$proporcion_saludable,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso))
map
agebs_nl <- agebs_nl %>%
mutate(indice_acceso = case_when(
GM_2020 == "Muy bajo" ~ 1,
GM_2020 == "Bajo" ~ 0.8,
GM_2020 == "Medio" ~ 0.6,
GM_2020 == "Alto" ~ 0.4,
GM_2020 == "Muy alto" ~ 0.2
)) %>%
mutate(indice_acceso = indice_acceso + proporcion_saludable)
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>GMU:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables <br>cercanas:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Accesibilidad <br>alimento saludable:</strong>",agebs_nl$proporcion_saludable,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso))
map
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>GMU:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso))
map
agebs_nl <- agebs_nl %>%
mutate(indice_acceso = case_when(
GM_2020 == "Muy bajo" ~ 5,
GM_2020 == "Bajo" ~ 4,
GM_2020 == "Medio" ~ 3,
GM_2020 == "Alto" ~ 2,
GM_2020 == "Muy alto" ~ 1
),indice_acceso = indice_acceso * 0.5) %>%
mutate(indice_acceso = indice_acceso + proporcion_saludable)
agebs_nl <- agebs_nl %>%
mutate(indice_acceso = case_when(
GM_2020 == "Muy bajo" ~ 5,
GM_2020 == "Bajo" ~ 4,
GM_2020 == "Medio" ~ 3,
GM_2020 == "Alto" ~ 2,
GM_2020 == "Muy alto" ~ 1
),indice_acceso = indice_acceso * 0.5,
indice_acceso = indice_acceso + proporcion_saludable)
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>GMU:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso))
map
agebs_nl <- agebs_nl %>%
mutate(indice_acceso = case_when(
GM_2020 == "Muy bajo" ~ 5,
GM_2020 == "Bajo" ~ 4,
GM_2020 == "Medio" ~ 3,
GM_2020 == "Alto" ~ 2,
GM_2020 == "Muy alto" ~ 1
),indice_acceso = indice_acceso * 0.5,
indice_acceso = ifelse(is.na(indice_acceso),indice_acceso, indice_acceso + proporcion_saludable))
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>GMU:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso))
map
is.na(agebs_nl$indice_acceso[1])
agebs_nl <- agebs_nl %>%
mutate(indice_acceso = case_when(
GM_2020 == "Muy bajo" ~ 5,
GM_2020 == "Bajo" ~ 4,
GM_2020 == "Medio" ~ 3,
GM_2020 == "Alto" ~ 2,
GM_2020 == "Muy alto" ~ 1
),indice_acceso = indice_acceso * 0.5)#,
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>GMU:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso))
map
agebs_nl <- agebs_nl %>%
mutate(indice_acceso = case_when(
GM_2020 == "Muy bajo" ~ 5,
GM_2020 == "Bajo" ~ 4,
GM_2020 == "Medio" ~ 3,
GM_2020 == "Alto" ~ 2,
GM_2020 == "Muy alto" ~ 1
),indice_acceso = indice_acceso * 0.5,
indice_acceso = ifelse(is.na(proporcion_saludable),indice_acceso, indice_acceso + proporcion_saludable))
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>GMU:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso))
map
saveWidget(map, file = "Datos/processed/accesibilidad_alimentaria.html")
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>Grado de Marginación:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso))
map
saveWidget(map, file = "Datos/processed/accesibilidad_alimentaria.html")
15910/26875
?addLegend
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>Grado de Marginación:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso)) %>%
addLegend(position = "bottomright", pal = pal, values = ~indice_acceso)
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>Grado de Marginación:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso)) %>%
addLegend(position = "bottomright", pal = pal, values = indice_acceso,
title = "Acceso a alimento saludable", opacity = 1)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>Grado de Marginación:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso)) %>%
addLegend(position = "bottomright", pal = pal, values = agebs_nl$indice_acceso,
title = "Acceso a alimento saludable", opacity = 1)
map
saveWidget(map, file = "Datos/processed/accesibilidad_alimentaria.html")
# Proporción de opciones saludables según índice de marginación
lm_prop_imu <- lm(proporcion_saludable ~ IM_2020, data = agebs_nl)
plot(agebs_nl$IM_2020,agebs_nl$proporcion_saludable)
abline(lm_prop_imu)
plot(agebs_nl$IM_2020,agebs_nl$proporcion_saludable,
main = "Acceso a alimentos saludables según índice de marginación",
xlab = "Índice de marginación",
ylab = "Proporción de opciones saludables")
abline(lm_prop_imu)
plot(agebs_nl$IM_2020,agebs_nl$proporcion_saludable,
main = "Acceso a alimentos saludables \nsegún índice de marginación",
xlab = "Índice de marginación",
ylab = "Proporción de opciones saludables")
abline(lm_prop_imu)
# Acceso a unidades económicas alimentarias según índice de marginación
lm_tot_imu <- lm(unidades_totales ~ IM_2020, data = agebs_nl)
plot(agebs_nl$IM_2020,agebs_nl$unidades_totales,
main = "Acceso a unidades económicas alimentarias\nsegún índice de marginación",
xlab = "Índice de marginación",
ylab = "Proporción de opciones saludables")
abline(lm_tot_imu)
# Acceso a unidades económicas alimentarias saludables según índice de marginación
lm_sal_imu <- lm(unidades_saludables ~ IM_2020, data = agebs_nl)
plot(agebs_nl$IM_2020,agebs_nl$unidades_saludables,
main = "Acceso a unidades económicas alimentarias\nsaludables según índice de marginación por AGEB",
xlab = "Índice de marginación",
ylab = "Número de unidades saludables cercanas")
abline(lm_sal_imu)
plot(agebs_nl$IM_2020,agebs_nl$unidades_totales,
main = "Acceso a unidades económicas alimentarias\nsegún índice de marginación",
xlab = "Índice de marginación",
ylab = "Número de unidades cercanas")
abline(lm_tot_imu)
# Acceso a unidades económicas alimentarias saludables según índice de marginación
lm_sal_imu <- lm(unidades_saludables ~ IM_2020, data = agebs_nl)
plot(agebs_nl$IM_2020,agebs_nl$unidades_saludables,
main = "Acceso a unidades económicas alimentarias\nsaludables según índice de marginación por AGEB",
xlab = "Índice de marginación",
ylab = "Número de unidades saludables cercanas")
abline(lm_sal_imu)
# Proporción de opciones saludables según índice de marginación
lm_prop_imu <- lm(proporcion_saludable ~ IM_2020, data = agebs_nl)
plot(agebs_nl$IM_2020,agebs_nl$proporcion_saludable,
main = "Acceso a alimentos saludables \nsegún índice de marginación",
xlab = "Índice de marginación",
ylab = "Proporción de opciones saludables")
abline(lm_prop_imu)
lm_blight <- lm(indice_acceso ~ pobtot + tvivhab, data = agebs_nl)
summary(lm_blight)
summary(lm_tot_imu)
summary(lm_sal_imu)
summary(lm_prop_imu)
lm(indice_acceso~pobtot, data = agebs_nl)
lm(indice_acceso~tvivhab, data = agebs_nl)
class(agebs_nl$pobtot)
class(agebs_nl$tvivhab)
agebs_nl$tvivhab[1:10]
agebs_nl$pobtot[1:10]
View(agebs_nl)
agebs_nl <- agebs_nl %>%
mutate(pobtot = as.numeric(pobtot),
tvivhab = as.numeric(tvivhab))
lm(indice_acceso~tvivhab, data = agebs_nl)
summary(lm(indice_acceso~tvivhab, data = agebs_nl))
lm(indice_acceso~pobtot, data = agebs_nl)
summary(lm(indice_acceso~pobtot, data = agebs_nl))
lm_blight <- lm(indice_acceso~pobtot+tvivhab, data = agebs_nl)
summary(lm_blight)
plot(agebs_nl$tvivhab, agebs_nl$indice_acceso)
abline(lm(indice_acceso~tvivhab, data = agebs_nl))
plot(agebs_nl$pobtot, agebs_nl$indice_acceso)
abline(lm(indice_acceso~pobtot, data = agebs_nl))
plot(agebs_nl$proporcion_saludable,agebs_nl$tvivhab)
abline(lm(tvivhab ~ proporcion_saludable, data = agebs_nl))
# Acceso a unidades económicas alimentarias según índice de marginación
lm_tot_imu <- lm(unidades_totales ~ IM_2020, data = agebs_nl)
plot(agebs_nl$IM_2020,agebs_nl$unidades_totales,
main = "Acceso a unidades económicas alimentarias\nsegún índice de marginación",
xlab = "Índice de marginación",
ylab = "Número de unidades cercanas")
abline(lm_tot_imu)
# Acceso a unidades económicas alimentarias según índice de marginación
lm_tot_imu <- lm(unidades_totales ~ log(IM_2020), data = agebs_nl)
plot(agebs_nl$IM_2020,agebs_nl$unidades_totales,
main = "Acceso a unidades económicas alimentarias\nsegún índice de marginación",
xlab = "Índice de marginación",
ylab = "Número de unidades cercanas")
abline(lm_tot_imu)
abline(lm_tot_imu)
plot(log(agebs_nl$IM_2020),agebs_nl$unidades_totales,
main = "Acceso a unidades económicas alimentarias\nsegún índice de marginación",
xlab = "Índice de marginación",
ylab = "Número de unidades cercanas")
abline(lm_tot_imu)
lm(indice_acceso~tvivhab, data = agebs_nl)
summary(lm(indice_acceso~tvivhab, data = agebs_nl))
summary(lm(indice_acceso~pobtot, data = agebs_nl))
lm_blight <- lm(indice_acceso~pobtot+tvivhab, data = agebs_nl)
summary(lm_blight)
table(datos_denue$nombre_act)
