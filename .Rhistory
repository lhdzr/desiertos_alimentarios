# LECTURA DATOS CENSALES 2020
censo <- read.csv("Datos/raw/ageb_mza_urbana_19_cpv2020_csv/ageb_mza_urbana_19_cpv2020/conjunto_de_datos/conjunto_de_datos_ageb_urbana_19_cpv2020.csv") %>%
select(c("ENTIDAD","MUN", "LOC","AGEB"))
names(censo)
# LECTURA DATOS CENSALES 2020
censo <- read.csv("Datos/raw/ageb_mza_urbana_19_cpv2020_csv/ageb_mza_urbana_19_cpv2020/conjunto_de_datos/conjunto_de_datos_ageb_urbana_19_cpv2020.csv") %>%
select(c("ENTIDAD","MUN", "LOC","AGEB","P3YM_HLI","P3YM_HLI_M","P3YM_HLI_F")) %>%
mutate(CVE_AGEB = paste0(ENTIDAD,MUN,LOC,AGEB))
censo$CVE_AGEB[1:10]
length(unique(censo$CVE_AGEB))
# LECTURA DATOS CENSALES 2020
censo <- read.csv("Datos/raw/ageb_mza_urbana_19_cpv2020_csv/ageb_mza_urbana_19_cpv2020/conjunto_de_datos/conjunto_de_datos_ageb_urbana_19_cpv2020.csv") %>%
select(c("ENTIDAD","MUN", "LOC","AGEB","P3YM_HLI","P3YM_HLI_M","P3YM_HLI_F")) %>%
mutate(CVE_AGEB = paste0(ENTIDAD,MUN,LOC,AGEB)) %>%
group_by(CVE_AGEB) %>%
summarise(POB_IND = sum(P3YM_HLI),
HOM_IND = sum(P3YM_HLI_M),
MUJ_IND = sum(P3YM_HLI_F))
# LECTURA DATOS CENSALES 2020
censo <- read.csv("Datos/raw/ageb_mza_urbana_19_cpv2020_csv/ageb_mza_urbana_19_cpv2020/conjunto_de_datos/conjunto_de_datos_ageb_urbana_19_cpv2020.csv") %>%
select(c("ENTIDAD","MUN", "LOC","AGEB","P3YM_HLI","P3YM_HLI_M","P3YM_HLI_F")) %>%
mutate(CVE_AGEB = paste0(ENTIDAD,MUN,LOC,AGEB)) %>%
group_by(CVE_AGEB) %>%
summarise(POB_IND = sum(as.integer(P3YM_HLI)),
HOM_IND = sum(as.integer(P3YM_HLI_M)),
MUJ_IND = sum(as.integer(P3YM_HLI_F)))
View(censo)
# LECTURA DATOS CENSALES 2020
censo <- read.csv("Datos/raw/ageb_mza_urbana_19_cpv2020_csv/ageb_mza_urbana_19_cpv2020/conjunto_de_datos/conjunto_de_datos_ageb_urbana_19_cpv2020.csv") %>%
mutate(CVE_AGEB = paste0(ENTIDAD,MUN,LOC,AGEB)) %>%
group_by(CVE_AGEB) %>%
summarise(POB_IND = sum(as.integer(P3YM_HLI)),
HOM_IND = sum(as.integer(P3YM_HLI_M)),
MUJ_IND = sum(as.integer(P3YM_HLI_F)))
View(censo)
agebs_nl <- agebs_nl %>%
merge(censo, by = 'CVE_AGEB')
pal <- colorNumeric("YlOrRd", agebs_nl$POB_IND,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(POB_IND),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<br><strong>Población Indígena:</strong>",agebs_nl$POB_IND,
"<br><strong>Unidades económicas <br>cercanas:</strong>",
agebs_nl$unidades_totales))
map
pal <- colorNumeric("YlOrRd", agebs_nl$unidades_totales,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(unidades_totales),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<br><strong>Unidades económicas <br>cercanas:</strong>",
agebs_nl$unidades_totales))
map
pal <- colorNumeric("YlOrRd", agebs_nl$POB_IND,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(POB_IND),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>Población Indígena:</strong>",agebs_nl$POB_IND,
"<br><strong>Grado de Marginación:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso)) %>%
addLegend(position = "bottomright", pal = pal, values = agebs_nl$indice_acceso,
title = "Acceso a alimento saludable", opacity = 1)
map
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>Grado de Marginación:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso)) %>%
addLegend(position = "bottomright", pal = pal, values = agebs_nl$indice_acceso,
title = "Acceso a alimento saludable", opacity = 1)
map
View(agebs_nl)
# GENERACIÓN DE DATOS DE LOS AGEBS EN NUEVO LEON
# (LOS DATOS FUERON DESCARGADOS USANDO EL SCRIPT descarga_datos_geo.R)
agebs_nl <- data.frame()
for (code in nl_codes) {
mun_str <- sprintf("%03d",code)
filepath <- paste0(ageb_output_dir,"/ageb19",mun_str,".geojson")
mun_agebs <- read_sf(filepath)
agebs_nl <- rbind(agebs_nl,mun_agebs)
print(paste("Municipio",mun_str,"agregado."))
}
# CRUZAR DATOS DE AGEBS CON DATOS DE INDICE DE MARGINACIÓN URBANA
agebs_nl$CVE_AGEB <- paste0(agebs_nl$cve_agee,agebs_nl$cve_agem,agebs_nl$cve_loc,agebs_nl$cve_ageb)
agebs_nl <- left_join(agebs_nl,IMU_2020,by="CVE_AGEB")
agebs_nl$GM_2020 <- factor(agebs_nl$GM_2020, levels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"), ordered = TRUE)
# ENCONTRAR CENTROIDE DE AGEBS
agebs_nl$centroid <- st_centroid(agebs_nl$geometry)
# Cambiar tipo de datos de pobtot y tvivhab
agebs_nl <- agebs_nl %>%
mutate(pobtot = as.numeric(pobtot),
tvivhab = as.numeric(tvivhab))
##### DENUE
datos_denue <- read_sf("Datos/raw/INEGI_DENUE_12052023/INEGI_DENUE_12052023.shp") %>%
select(id,clee,nom_estab,raz_social,
codigo_act,nombre_act,per_ocu,
cve_ent,cve_mun,ageb,manzana,
latitud,longitud,geometry)
Encoding(datos_denue$nom_estab) <- "latin1"
Encoding(datos_denue$nombre_act) <- "latin1"
# DEFINIR CUÁLES AGEBS SE CONSIDERAN SALUDABLES
datos_denue$alimento_convencional <- 1
# OXXOS Y SEVEN ELEVENS
datos_denue$alimento_convencional[datos_denue$raz_social %in% c("CADENA COMERCIAL OXXO SA DE CV",
"CADENA COMERCIAL OXXO",
"CADENA COMERCIAL OXXO SUCURSAL HACIENDADEL ANGEL SA DE CV",
"7-ELEVEN MEXICO SA DE CV",
"7 ELEVEN MEXICO SA DE CV",
"SEVEN ELEVEN DE MEXICO")] <- 0
# DULCERÍAS, PALETERÍAS, OTROS ALIMENTOS, MISCELÁNEAS
actividades_no_saludables <- c("461160","461170","461190","461110")
table(datos_denue$alimento_convencional)
# DEFINIR CUÁLES AGEBS SE CONSIDERAN SALUDABLES
datos_denue$alimento_convencional <- 1
table(datos_denue$alimento_convencional)
# OXXOS Y SEVEN ELEVENS
datos_denue$alimento_convencional[datos_denue$raz_social %in% c("CADENA COMERCIAL OXXO SA DE CV",
"CADENA COMERCIAL OXXO",
"CADENA COMERCIAL OXXO SUCURSAL HACIENDADEL ANGEL SA DE CV",
"7-ELEVEN MEXICO SA DE CV",
"7 ELEVEN MEXICO SA DE CV",
"SEVEN ELEVEN DE MEXICO")] <- 0
# DULCERÍAS, PALETERÍAS, OTROS ALIMENTOS, MISCELÁNEAS
actividades_no_saludables <- c("461160","461170","461190","461110")
datos_denue$alimento_convencional[datos_denue$codigo_act %in% actividades_no_saludables] <- 0
table(datos_denue$alimento_convencional)
# DEFINIR CUÁLES AGEBS SE CONSIDERAN SALUDABLES
datos_denue$alimento_convencional <- 1
# OXXOS Y SEVEN ELEVENS
datos_denue$alimento_convencional[datos_denue$raz_social %in% c("CADENA COMERCIAL OXXO SA DE CV",
"CADENA COMERCIAL OXXO",
"CADENA COMERCIAL OXXO SUCURSAL HACIENDADEL ANGEL SA DE CV",
"7-ELEVEN MEXICO SA DE CV",
"7 ELEVEN MEXICO SA DE CV",
"SEVEN ELEVEN DE MEXICO")] <- 0
# DULCERÍAS, PALETERÍAS, OTROS ALIMENTOS, MISCELÁNEAS
actividades_no_saludables <- c("461160","461170","461190","461110")
datos_denue$alimento_convencional[datos_denue$codigo_act %in% actividades_no_saludables] <- 0
datos_denue <- st_transform(datos_denue, crs = 4326)
# GENERACIÓN DE BUFFER ALREDEDOR DE AGEBS
agebs_nl$buffer <- st_buffer(agebs_nl$centroid, dist = 1000)
buffers_agebs <- agebs_nl %>%
as.data.frame() %>%
select(CVE_AGEB,buffer) %>%
st_as_sf()
# INTERSECCIÓN ENTRE BUFFERS DE AGEBS Y UNIDADES ECONÓMICAS (UEs)
agebs_denue <- st_join(buffers_agebs,datos_denue,join = st_intersects) %>%
as.data.frame() %>%
select(CVE_AGEB,id,alimento_convencional)
agebs_denue_count <- agebs_denue  %>%
group_by(CVE_AGEB) %>%
summarise(unidades_totales = n(),
unidades_saludables = sum(alimento_convencional)) %>%
mutate(proporcion_saludable = round(unidades_saludables / unidades_totales, 2))
# CONTABILIZACIÓN DE UEs por AGEB
agebs_nl <- agebs_nl %>%
merge(agebs_denue_count, by = 'CVE_AGEB') %>%
merge(censo, by = 'CVE_AGEB')
head(censo)
# GENERACIÓN DE DATOS DE LOS AGEBS EN NUEVO LEON
# (LOS DATOS FUERON DESCARGADOS USANDO EL SCRIPT descarga_datos_geo.R)
agebs_nl <- data.frame()
for (code in nl_codes) {
mun_str <- sprintf("%03d",code)
filepath <- paste0(ageb_output_dir,"/ageb19",mun_str,".geojson")
mun_agebs <- read_sf(filepath)
agebs_nl <- rbind(agebs_nl,mun_agebs)
print(paste("Municipio",mun_str,"agregado."))
}
# CRUZAR DATOS DE AGEBS CON DATOS DE INDICE DE MARGINACIÓN URBANA
agebs_nl$CVE_AGEB <- paste0(agebs_nl$cve_agee,agebs_nl$cve_agem,agebs_nl$cve_loc,agebs_nl$cve_ageb)
agebs_nl <- left_join(agebs_nl,IMU_2020,by="CVE_AGEB")
agebs_nl$GM_2020 <- factor(agebs_nl$GM_2020, levels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"), ordered = TRUE)
# ENCONTRAR CENTROIDE DE AGEBS
agebs_nl$centroid <- st_centroid(agebs_nl$geometry)
# Cambiar tipo de datos de pobtot y tvivhab
agebs_nl <- agebs_nl %>%
mutate(pobtot = as.numeric(pobtot),
tvivhab = as.numeric(tvivhab))
# GENERACIÓN DE BUFFER ALREDEDOR DE AGEBS
agebs_nl$buffer <- st_buffer(agebs_nl$centroid, dist = 1000)
buffers_agebs <- agebs_nl %>%
as.data.frame() %>%
select(CVE_AGEB,buffer) %>%
st_as_sf()
# INTERSECCIÓN ENTRE BUFFERS DE AGEBS Y UNIDADES ECONÓMICAS (UEs)
agebs_denue <- st_join(buffers_agebs,datos_denue,join = st_intersects) %>%
as.data.frame() %>%
select(CVE_AGEB,id,alimento_convencional)
agebs_denue_count <- agebs_denue  %>%
group_by(CVE_AGEB) %>%
summarise(unidades_totales = n(),
unidades_saludables = sum(alimento_convencional)) %>%
mutate(proporcion_saludable = round(unidades_saludables / unidades_totales, 2))
# CONTABILIZACIÓN DE UEs por AGEB
agebs_nl_copia <- as.data.frame(agebs_nl)
agebs_nl_copia <- agebs_nl_copia %>%
merge(agebs_denue_count, by = 'CVE_AGEB') #%>%
agebs_nl_copia <- agebs_nl_copia %>%
merge(censo, by = 'CVE_AGEB')
# CONTABILIZACIÓN DE UEs por AGEB
agebs_nl_copia <- as.data.frame(agebs_nl)
summary(agebs_denue_count)
summary(censo)
class(censo)
class(agebs_nl_copia)
?merge
# CONTABILIZACIÓN DE UEs por AGEB
agebs_nl_copia <- as.data.frame(agebs_nl)
agebs_nl_copia <- agebs_nl_copia %>%
merge(agebs_denue_count, by = 'CVE_AGEB') %>%
merge(censo, by = 'CVE_AGEB',all.x = TRUE)
# CONTABILIZACIÓN DE UEs por AGEB
agebs_nl <- agebs_nl %>%
merge(agebs_denue_count, by = 'CVE_AGEB') %>%
merge(censo, by = 'CVE_AGEB',all.x = TRUE)
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>Grado de Marginación:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso)) %>%
addLegend(position = "bottomright", pal = pal, values = agebs_nl$indice_acceso,
title = "Acceso a alimento saludable", opacity = 1)
map
source("tesina/funciones_descarga_inegi.R")
source("tesina/codigos_municipales_nl.R")
# DEFINICIÓN DE DIRECTORIOS DE SALIDA
city_limits_directory <- "Datos/raw/limites_municipales/"
ageb_output_dir <- "Datos/raw/agebs"
# LECTURA DATOS CENSALES 2020
censo <- read.csv("Datos/raw/ageb_mza_urbana_19_cpv2020_csv/ageb_mza_urbana_19_cpv2020/conjunto_de_datos/conjunto_de_datos_ageb_urbana_19_cpv2020.csv") %>%
mutate(CVE_AGEB = paste0(ENTIDAD,MUN,LOC,AGEB)) %>%
group_by(CVE_AGEB) %>%
summarise(POB_IND = sum(as.integer(P3YM_HLI)),
HOM_IND = sum(as.integer(P3YM_HLI_M)),
MUJ_IND = sum(as.integer(P3YM_HLI_F)))
# LECTURA DATOS ÍNDICE DE MARGINACIÓN URBANA
IMU_2020 <- readxl::read_xls("Datos/raw/IMU_2020/IMU_2020.xls", sheet = "IMU_2020") %>%
filter(ENT==19) %>%
select(CVE_AGEB,IM_2020,GM_2020,IMN_2020)
# GENERACIÓN DE DATOS DE LOS AGEBS EN NUEVO LEON
# (LOS DATOS FUERON DESCARGADOS USANDO EL SCRIPT descarga_datos_geo.R)
agebs_nl <- data.frame()
for (code in nl_codes) {
mun_str <- sprintf("%03d",code)
filepath <- paste0(ageb_output_dir,"/ageb19",mun_str,".geojson")
mun_agebs <- read_sf(filepath)
agebs_nl <- rbind(agebs_nl,mun_agebs)
print(paste("Municipio",mun_str,"agregado."))
}
# CRUZAR DATOS DE AGEBS CON DATOS DE INDICE DE MARGINACIÓN URBANA
agebs_nl$CVE_AGEB <- paste0(agebs_nl$cve_agee,agebs_nl$cve_agem,agebs_nl$cve_loc,agebs_nl$cve_ageb)
agebs_nl <- left_join(agebs_nl,IMU_2020,by="CVE_AGEB")
agebs_nl$GM_2020 <- factor(agebs_nl$GM_2020, levels = c("Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"), ordered = TRUE)
# ENCONTRAR CENTROIDE DE AGEBS
agebs_nl$centroid <- st_centroid(agebs_nl$geometry)
# Cambiar tipo de datos de pobtot y tvivhab
agebs_nl <- agebs_nl %>%
mutate(pobtot = as.numeric(pobtot),
tvivhab = as.numeric(tvivhab))
##### DENUE
datos_denue <- read_sf("Datos/raw/INEGI_DENUE_12052023/INEGI_DENUE_12052023.shp") %>%
select(id,clee,nom_estab,raz_social,
codigo_act,nombre_act,per_ocu,
cve_ent,cve_mun,ageb,manzana,
latitud,longitud,geometry)
Encoding(datos_denue$nom_estab) <- "latin1"
Encoding(datos_denue$nombre_act) <- "latin1"
# DEFINIR CUÁLES AGEBS SE CONSIDERAN SALUDABLES
datos_denue$alimento_convencional <- 1
# OXXOS Y SEVEN ELEVENS
datos_denue$alimento_convencional[datos_denue$raz_social %in% c("CADENA COMERCIAL OXXO SA DE CV",
"CADENA COMERCIAL OXXO",
"CADENA COMERCIAL OXXO SUCURSAL HACIENDADEL ANGEL SA DE CV",
"7-ELEVEN MEXICO SA DE CV",
"7 ELEVEN MEXICO SA DE CV",
"SEVEN ELEVEN DE MEXICO")] <- 0
# DULCERÍAS, PALETERÍAS, OTROS ALIMENTOS, MISCELÁNEAS
actividades_no_saludables <- c("461160","461170","461190","461110")
datos_denue$alimento_convencional[datos_denue$codigo_act %in% actividades_no_saludables] <- 0
datos_denue <- st_transform(datos_denue, crs = 4326)
####################################################################################3
# VISUALIZAR MARGINACIÓN Y UNIDADES ECONÓMICAS TOTALES
# MAPEAR AGEBS POR GRADO DE MARGINACIÓN
pal <- colorFactor("YlOrRd", agebs_nl$GM_2020, ordered = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(GM_2020),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<br><strong>GMU:</strong>",agebs_nl$GM_2020)) %>%
addCircleMarkers(datos_denue$longitud,
datos_denue$latitud,
clusterOptions = markerClusterOptions(),
popup = as.character(datos_denue$nom_estab))
map
# GENERACIÓN DE BUFFER ALREDEDOR DE AGEBS
agebs_nl$buffer <- st_buffer(agebs_nl$centroid, dist = 1000)
buffers_agebs <- agebs_nl %>%
as.data.frame() %>%
select(CVE_AGEB,buffer) %>%
st_as_sf()
# INTERSECCIÓN ENTRE BUFFERS DE AGEBS Y UNIDADES ECONÓMICAS (UEs)
agebs_denue <- st_join(buffers_agebs,datos_denue,join = st_intersects) %>%
as.data.frame() %>%
select(CVE_AGEB,id,alimento_convencional)
agebs_denue_count <- agebs_denue  %>%
group_by(CVE_AGEB) %>%
summarise(unidades_totales = n(),
unidades_saludables = sum(alimento_convencional)) %>%
mutate(proporcion_saludable = round(unidades_saludables / unidades_totales, 2))
HEAD(agebs_denue_count)
head(agebs_denue_count)
head(agebs_denue_count)
# CONTABILIZACIÓN DE UEs por AGEB
agebs_nl <- agebs_nl %>%
merge(agebs_denue_count, by = 'CVE_AGEB') %>%
merge(censo, by = 'CVE_AGEB',all.x = TRUE)
# GENERACIÓN DE INDICE DE ACCESIBILIDAD
agebs_nl <- agebs_nl %>%
mutate(indice_acceso = case_when(
GM_2020 == "Muy bajo" ~ 5,
GM_2020 == "Bajo" ~ 4,
GM_2020 == "Medio" ~ 3,
GM_2020 == "Alto" ~ 2,
GM_2020 == "Muy alto" ~ 1
),indice_acceso = indice_acceso * 0.5,
indice_acceso = ifelse(is.na(proporcion_saludable),indice_acceso, indice_acceso + proporcion_saludable))
pal <- colorNumeric("YlOrRd", agebs_nl$indice_acceso,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(indice_acceso),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>Grado de Marginación:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso)) %>%
addLegend(position = "bottomright", pal = pal, values = agebs_nl$indice_acceso,
title = "Acceso a alimento saludable", opacity = 1)
map
pal <- colorNumeric("YlOrRd", agebs_nl$POB_IND,reverse = TRUE)
pal <- colorNumeric("YlOrRd", agebs_nl$POB_IND,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(POB_IND),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>Grado de Marginación:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso,
"<br><strong>Población Indígena:</strong>",agebs_nl$POB_IND)) %>%
addLegend(position = "bottomright", pal = pal, values = agebs_nl$POB_IND,
title = "Población Indígena", opacity = 1)
map
table(agebs_nl$POB_IND)
length(unique(agebs_nl$POB_IND))
length(unique(agebs_nl$pobtot))
length(unique(censo$POB_IND))
View(censo[is.na(censo$POB_IND)==FALSE,])
# LECTURA DATOS CENSALES 2020
censo <- read.csv("Datos/raw/ageb_mza_urbana_19_cpv2020_csv/ageb_mza_urbana_19_cpv2020/conjunto_de_datos/conjunto_de_datos_ageb_urbana_19_cpv2020.csv") %>%
mutate(CVE_AGEB = paste0(ENTIDAD,MUN,LOC,AGEB)) #%>%
View(censo)
# LECTURA DATOS CENSALES 2020
censo <- read.csv("Datos/raw/ageb_mza_urbana_19_cpv2020_csv/ageb_mza_urbana_19_cpv2020/conjunto_de_datos/conjunto_de_datos_ageb_urbana_19_cpv2020.csv") %>%
mutate(CVE_AGEB = paste0(ENTIDAD,MUN,LOC,AGEB)) %>%
select(ENTIDAD,MUN,LOC,AGEB,CVE_AGEB)#%>%
# LECTURA DATOS CENSALES 2020
censo <- read.csv("Datos/raw/ageb_mza_urbana_19_cpv2020_csv/ageb_mza_urbana_19_cpv2020/conjunto_de_datos/conjunto_de_datos_ageb_urbana_19_cpv2020.csv") %>%
mutate(CVE_AGEB = paste0(ENTIDAD,sprintf("%02d",MUN),sprintf("%02d",LOC),AGEB)) %>%
select(ENTIDAD,MUN,LOC,AGEB,CVE_AGEB)#%>%
# LECTURA DATOS CENSALES 2020
censo <- read.csv("Datos/raw/ageb_mza_urbana_19_cpv2020_csv/ageb_mza_urbana_19_cpv2020/conjunto_de_datos/conjunto_de_datos_ageb_urbana_19_cpv2020.csv") %>%
mutate(CVE_AGEB = paste0(ENTIDAD,sprintf("%02d",MUN),sprintf("%02d",LOC),AGEB)) %>%
group_by(CVE_AGEB) %>%
summarise(POB_IND = sum(as.integer(P3YM_HLI)),
HOM_IND = sum(as.integer(P3YM_HLI_M)),
MUJ_IND = sum(as.integer(P3YM_HLI_F)))
View(censo)
select(agebs_nl,-c(POB_IND,HOM_IND,MUJ_IND))
agebs_nl <- select(agebs_nl,-c(POB_IND,HOM_IND,MUJ_IND))
agebs_nl <- select(agebs_nl,-c(unidades_totales,unidades_saludables,indice_acceso))
# CONTABILIZACIÓN DE UEs por AGEB
agebs_nl <- agebs_nl %>%
merge(agebs_denue_count, by = 'CVE_AGEB') %>%
merge(censo, by = 'CVE_AGEB',all.x = TRUE)
agebs_nl <- select(agebs_nl,-c(unidades_totales,unidades_saludables,indice_acceso,proporcion_saludable.x,proporcion_saludable.y))
agebs_nl <- select(agebs_nl,-c(unidades_totales,unidades_saludables,proporcion_saludable.x,proporcion_saludable.y))
agebs_nl <- select(agebs_nl,-c(POB_IND,HOM_IND,MUJ_IND))
# CONTABILIZACIÓN DE UEs por AGEB
agebs_nl <- agebs_nl %>%
merge(agebs_denue_count, by = 'CVE_AGEB') %>%
merge(censo, by = 'CVE_AGEB',all.x = TRUE)
# GENERACIÓN DE INDICE DE ACCESIBILIDAD
agebs_nl <- agebs_nl %>%
mutate(indice_acceso = case_when(
GM_2020 == "Muy bajo" ~ 5,
GM_2020 == "Bajo" ~ 4,
GM_2020 == "Medio" ~ 3,
GM_2020 == "Alto" ~ 2,
GM_2020 == "Muy alto" ~ 1
),indice_acceso = indice_acceso * 0.5,
indice_acceso = ifelse(is.na(proporcion_saludable),indice_acceso, indice_acceso + proporcion_saludable))
pal <- colorNumeric("YlOrRd", agebs_nl$POB_IND,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(POB_IND),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>Grado de Marginación:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso,
"<br><strong>Población Indígena:</strong>",agebs_nl$POB_IND)) %>%
addLegend(position = "bottomright", pal = pal, values = agebs_nl$POB_IND,
title = "Población Indígena", opacity = 1)
map
length(unique(censo$POB_IND))
length(unique(agebs_nl$POB_IND))
length(unique(agebs_nl$HOM_IND))
censo[is.na(censo$POB_IND)==FALSE,]
View(censo[is.na(censo$POB_IND)==FALSE,])
agebs_nl[agebs_nl$CVE_AGEB=="1906011261",]
agebs_nl[agebs_nl$CVE_AGEB=="1906011524",]
head(agebs_nl)
# LECTURA DATOS CENSALES 2020
censo <- read.csv("Datos/raw/ageb_mza_urbana_19_cpv2020_csv/ageb_mza_urbana_19_cpv2020/conjunto_de_datos/conjunto_de_datos_ageb_urbana_19_cpv2020.csv") %>%
mutate(CVE_AGEB = paste0(ENTIDAD,sprintf("%03d",MUN),sprintf("%04d",LOC),AGEB)) %>%
group_by(CVE_AGEB) %>%
summarise(POB_IND = sum(as.integer(P3YM_HLI)),
HOM_IND = sum(as.integer(P3YM_HLI_M)),
MUJ_IND = sum(as.integer(P3YM_HLI_F)))
agebs_nl <- select(agebs_nl,-c(POB_IND,HOM_IND,MUJ_IND,unidades_totales,unidades_saludables,proporcion_saludable))
View(censo[is.na(censo$POB_IND)==FALSE,])
# CONTABILIZACIÓN DE UEs por AGEB
agebs_nl <- agebs_nl %>%
merge(agebs_denue_count, by = 'CVE_AGEB') %>%
merge(censo, by = 'CVE_AGEB',all.x = TRUE)
pal <- colorNumeric("YlOrRd", agebs_nl$POB_IND,reverse = TRUE)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = agebs_nl, fillColor = ~pal(POB_IND),
stroke = TRUE, opacity = 1,
fillOpacity = 0.8, color = "#BDBDC3", weight = .1,
popup = ~paste("<strong>AGEB:</strong>",agebs_nl$cve_ageb,
"<strong>MUN:</strong>",agebs_nl$nom_agem,
"<br><strong>Grado de Marginación:</strong>",agebs_nl$GM_2020,
"<br><strong>Unidades económicas <br>cercanas:</strong>",agebs_nl$unidades_totales,
"<br><strong>Opciones saludables:</strong>",agebs_nl$unidades_saludables,
"<br><strong>Índice de acceso:</strong>",agebs_nl$indice_acceso,
"<br><strong>Población Indígena:</strong>",agebs_nl$POB_IND)) %>%
addLegend(position = "bottomright", pal = pal, values = agebs_nl$POB_IND,
title = "Población Indígena", opacity = 1)
map
mean(agebs_nl$indice_acceso)
length(unique(agebs_nl$POB_IND))
lm_acc_ind <- lm(indice_acceso ~ POB_IND, data = agebs_nl)
summary(lm_acc_ind)
plot(agebs_nl$POB_IND, agebs_nl$indice_acceso)
plot(agebs_nl$POB_IND, agebs_nl$indice_acceso)
abline(lm_acc_ind)
lm_acc_ind <- lm(proporcion_saludable ~ POB_IND, data = agebs_nl)
summary(lm_acc_ind)
plot(agebs_nl$POB_IND, agebs_nl$proporcion_saludable)
abline(lm_acc_ind)
agebs_nl$POB_IND[!is.na(agebs_nl$POB_IND)]
agebs_nl$POB_IND[is.na(agebs_nl$POB_IND)]<-0
plot(agebs_nl$POB_IND, agebs_nl$proporcion_saludable)
# Regresión de acceso sobre cantidad de población indígena
lm_acc_ind <- lm(proporcion_saludable ~ POB_IND, data = agebs_nl)
summary(lm_acc_ind)
plot(agebs_nl$POB_IND, agebs_nl$proporcion_saludable)
abline(lm_acc_ind)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
incidentes <- read.csv("~/Downloads/20230517_siniestrosNL.csv",encoding = "latin1", na.strings = c("", "\\N"))
incidentes <- read.csv("./Downloads/20230517_siniestrosNL.csv",encoding = "latin1", na.strings = c("", "\\N"))
dir.create("Datos/processed/agebs_nl_indice")
